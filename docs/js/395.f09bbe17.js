(self["webpackChunkvisual"]=self["webpackChunkvisual"]||[]).push([[395],{5395:function(n,e,t){"use strict";t.r(e),t.d(e,{default:function(){return c}});var r=function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("div",[t("canvas",{ref:"canvas",attrs:{width:"300",height:"300"}})])},o=[],i={name:"WebglRound",components:{},mounted:function(){this.init();var n=this.$refs["canvas"];n.offsetLeft,n.offsetTop,n.clientWidth,n.clientHeight;n.addEventListener("mousemove",(function(n){n.x,n.y}),!1)},methods:{init:function(){var n="\n        //特定的变量\n        attribute vec2 a_vertexPosition;\n        attribute vec2 uv;\n\n        varying vec2 vUv;\n        void main() {\n          gl_PointSize = 1.0;\n          vUv = uv;\n          gl_Position = vec4(a_vertexPosition, 1.0, 1.0);\n        }\n      ",e="\n        #ifdef GL_ES\n        precision highp float;\n        #endif\n        varying vec2 vUv;\n\n        uniform float u_time;\n\n        vec3 hsv2rgb(vec3 c){ \n          vec3 rgb = clamp(abs(mod(c.x*6.0+vec3(0.0,4.0,2.0), 6.0)-3.0)-1.0, 0.0, 1.0); \n          rgb = rgb * rgb * (3.0 - 2.0 * rgb); \n          return c.z * mix(vec3(1.0), rgb, c.y);\n        }\n\n        void main() {\n          float d = distance(vUv, vec2(0.5));\n          //直接边缘\n          //gl_FragColor.rgb = step(d, 0.2) * vec3(1.0);\n          //光滑的边缘\n          //gl_FragColor.rgb = smoothstep(d, d+0.01, 0.3)  * vec3(1.0);\n          //内渐变\n          //gl_FragColor.rgb = smoothstep(d,0.31, 0.3)  * vec3(1.0);\n          //外渐变\n          //gl_FragColor.rgb = smoothstep(0.3,d, 0.31)  * vec3(1.0);\n          //环状\n          //gl_FragColor.rgb = (smoothstep(d, d+0.01, 0.3) -  smoothstep(d, d+0.01, 0.28))  * vec3(1.0);\n          \n          if(d>0.31){\n            gl_FragColor.rgb = vec3(1.0);\n          }else if(0.3<=d && d<=0.31){\n            gl_FragColor.rgb = vec3(1);\n          }else{          \n            //float a = atan(vUv- vec2(0.5));\n            //float diff = 1.0 - d/0.3;\n            //            \n            //gl_FragColor.rgb = vec3(1,0,1);\n\n            //角度\n            vec2 r = vUv  - vec2(0.5);   \n            float a = atan(r.y, r.x);\n            //h色相 s饱和度 v明度\n            gl_FragColor.rgb = hsv2rgb(vec3(a/6.28, d/0.3 + 0.3,  1.8-d/0.3 + u_time));     \n\n          }        \n          gl_FragColor.a = 1.0;\n        }   \n      ",t=document.querySelector("canvas"),r=new GlRenderer(t),o=r.compileSync(e,n);r.useProgram(o),r.setMeshData([{positions:[[-1,-1],[-1,1],[1,1],[1,-1]],attributes:{uv:[[0,0],[0,1],[1,1],[1,0]]},cells:[[0,1,2],[2,0,3]]}]),r.uniforms.u_time=0,r.render(),this.update(r)},update:function(n){var e=.02;requestAnimationFrame((function t(){var r=n.uniforms.u_time;(r>1||r<0)&&(e=-e),n.uniforms.u_time+=e,requestAnimationFrame(t)}))}}},a=i,v=t(1001),s=(0,v.Z)(a,r,o,!1,null,null,null),c=s.exports}}]);